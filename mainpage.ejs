<!DOCTYPE html>

<html lang= "en">

	<head> <!-- BEGIN header -->
		<title>Blog</title>

		<!-- Latest compiled and minified bootstrap CSS -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
	  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<!-- manually add some padding so the nav bar doesn't overlap with body using inline style
		we only have to do this because the navbar is fixed to top, you should remove if you take that property away -->
		<style>
			body {
				padding-top: 60px;
			}

			#nav {
				background-color: white;
				color: black;
			}
			.nav.navbar-nav li a {
				color: black;
				font-family: "Avant Garde", Avantgarde, "Century Gothic", CenturyGothic, AppleGothic, sans-serif;
				text-transform: uppercase;
			}

			.navbar-header h {
				color: black;
				font-family: "Avant Garde", Avantgarde, "Century Gothic", CenturyGothic, AppleGothic, sans-serif;
			}

			.navbar-header h:hover {
				color: white;
			}

			.navbar .navbar-nav {
    		display: inline-block;
    		text-align: center;
			}
		</style>

	</head> <!-- END header -->

	<body><!-- BEGIN body -->

		<nav id = "nav" class="navbar navbar-inverse navbar-fixed-top" role="navigation">
		  <div class="container-fluid">
		    <div class="navbar-header">
					<div id="navhead"
		      <a class="navbar-brand" href="#">Classics</a>
				</div>
		    </div>
		    <ul class="nav navbar-nav">
		      <li class="active"><a href="gpage.html">Home</a></li>
					<li><a href="webpage2.html">Quote Generator</a></li>
					<li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href="#">Page 1 <span class="caret">
				</span></a>
        	<ul class="dropdown-menu">
	          <li><a href="#">Page 1-1</a></li>
	          <li><a href="#">Page 1-2</a></li>
	          <li><a href="#">Page 1-3</a></li>
        </ul>
			</li>

	      <li><a href="#">Page 3</a></li>
	    </ul>
		  </div>
		</nav>

<!--
		<div class="container">

		  <div class="starter-template">

			<h1>Blog</h1>

			<p>A webpage dedicated to classics and its importance in our modern world</p>

			<p class="lead">Sample app to change the GPA of any given student in our very official school records.</p>

			 empty alert box element we'll insert into when we have a successful change to the students records

			<div id="alertBox"></div>


			<table class="table table-hover" id="gpaTable">
				<tbody>
					<tr>
						<th data-field="id">Student Name</th>
						<th data-field="name">GPA</th>
						<th data-field="price">Hours Taken</th>
						<th></th>
					</tr>
				</tbody>
			</table>

			<button type="button" class="btn btn-info navbar-btn" onClick="alert(JSON.stringify(studentsRecords))">Export Records</button>
			<button type="button" class="btn btn-success navbar-btn" onClick="addStudent()">Add Student</button>
			<button type="button" class="btn btn-danger navbar-btn" onClick="deleteStudent()">Delete Student</button>

		  </div>

		</div>-->


	     <article>
	       <header>
	         <h1>Justin Beaver: Ever since I learned HTML, my life has made a complete 180</h1>
	         <p>Posted by: Damian Wielgosik</p>
	       </header>
	       <p>Justin Beaver confessed something that even his greatest fans would have never expected of the skilled musicians and lyricist. The young rock-and-roller admitted that since he typed his first title tag, his life became easier. It has been reported by those surrounding the Canadian that Beaver's private mentors, Ryan Loseling and Nicolas Crate, often walk around Los Angeles disputing what a great tool the HTML validator is.</p>
	       <figure>
	         <img src="cat.jpg" alt="Justin Beaver's cat is pleased">
	         <figcaption>Justin Beaver's happy cat</figcaption>
	       </figure>
	       <p>Beaver has already created some websites and does not intend to stop there.
	       <q>I will probably have a song about HTML on my next album,</q> - the artist added.
	       </p>
	     </article>
	   </body>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
		<script>

			//in lieu of having a database, we'll have a list of student record objects to build our site with
			var studentsRecords = [ {name: "Hermione", GPA: 4.0, totalHours: 18},
									{name: "Ron", GPA: 2.33, totalHours: 12},
									{name: "Harry", GPA: 3.1, totalHours: 15},
									{name: "Chris", GPA: 3.3, totalHours: 6},
									{name: "Jeff", GPA: 2.33, totalHours: 12},
									{name: "James", GPA: 3.1, totalHours: 15},
									{name: "Tim", GPA: 3.98, totalHours: 24} ];

			function drawTable() {
				// Find a <table> element with id="gpaTable":
				var table = document.getElementById("gpaTable");

				//clear the table first so we don't append the same items over and over!
				clearTable(table);

				for(i = 0; i < studentsRecords.length; i++) {
					// Create an empty <tr> element and add it to the ith position of the table:
					var row = table.insertRow(i+1);

					// get currentStudent object from list/array of students
					var currentStudent = studentsRecords[i];

					// Insert new cells (<td> elements) at the 0-3rd positions of the "new" <tr> element:
					var cell1 = row.insertCell(0);
					var cell2 = row.insertCell(1);
					var cell3 = row.insertCell(2);
					var cell4 = row.insertCell(3);

					// Add relevant text to the new cells
					cell1.innerHTML = currentStudent.name;
					cell2.innerHTML = currentStudent.GPA;
					cell3.innerHTML = currentStudent.totalHours;
					cell4.innerHTML = '<button type="button" class="btn btn-primary" onClick="updateGPA(this)">Update</button>';

				}

			}


			function clearTable(table) {
				var numRows = table.getElementsByTagName("tr").length;

				//deletes each row from the bottom up until the top, leaves row 0, our header row
				for(i = numRows - 1; i > 0; i--){
					table.deleteRow(i);
				}
			}

			function updateGPA(buttonClicked){
				//the function is triggered by a click on "this", which is our button element
				//we then call parentNode once to get the <td> element above that, and then once
				//more to get the <tr> or row element above that. Then the cells[0] of our row
				//element gives us the first cell of that row, which holds the student name
				var studentToBeChanged = buttonClicked.parentNode.parentNode.cells[0].textContent;

				var howManyClasses = prompt("How many classes did the student take?", 0);
				var totalCredits = 0;

				if(howManyClasses == 0) {
					//create a failure alert
					var alertBox = document.getElementById("alertBox");
					//this element is pretty much copied verbatim from bootstrap's site, make sure you use
					//single quotes around these when putting them in, since they have double quotes inside specifying
					//tag attributes
					alertBox.innerHTML = '<div class="alert alert-warning"><a href="#" class="close" data-dismiss="alert">&times;</a><strong>Failure!</strong> There is no GPA to calculate for zero classes.</div>'
					return;
				}

				for(i = 1; i <= howManyClasses; i++){
					var letterGrade = prompt("What grade did he/she get in class " + i + "? (A,B,C,D, or F only)");

					//taking input to lower case just in case they enter it in either form
					if (letterGrade.toLowerCase() == 'a'){
						totalCredits += 4;
					}
					else if (letterGrade.toLowerCase() == 'b'){
						totalCredits += 3;
					}
					else if (letterGrade.toLowerCase() == 'c') {
						totalCredits += 2;
					}
					else if (letterGrade.toLowerCase() == 'd') {
						totalCredits += 1;
					}
					//else do nothing because an F doesn't change the total credits earned
				}

				//right now app just assumes all classes are weighted equally for 3 hours
				var newGPA = (totalCredits/howManyClasses).toFixed(2);
				var newTotalHours = howManyClasses * 3;

				//find and update record that needs to be changed
				for(i = 0; i < studentsRecords.length; i++){
					if (studentsRecords[i].name == studentToBeChanged){
						//once we find the student object we want, change the GPA and hours, and then break from loop
						studentsRecords[i].GPA = newGPA;
						studentsRecords[i].totalHours = newTotalHours;
						break;
					}
				}

				//redraw our table now that our studentsrecords data object has changed/been updated
				drawTable();

				//create a success alert
				var alertBox = document.getElementById("alertBox");

				//this element is pretty much copied verbatim from bootstrap's site, make sure you use
				//single quotes around these when putting them in, since they have double quotes inside specifying
				//tag attributes
				alertBox.innerHTML = '<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert">&times;</a><strong>Success!</strong> The database has been updated.</div>'
			}


			function addStudent() {
				var newName = prompt("What's the student's name?");

				//notice this code is the same as the updateStudent code, could probably put into it's own function instead of repeating it (DRY)
				var howManyClasses = prompt("How many classes did the student take?", 0);
				var totalCredits = 0;

				if(howManyClasses == 0) {
					var alertBox = document.getElementById("alertBox");
					alertBox.innerHTML = '<div class="alert alert-danger"><a href="#" class="close" data-dismiss="alert">&times;</a><strong>Failure!</strong> There is no GPA to calculate for zero classes.</div>'
					return;
				}

				for(i = 1; i <= howManyClasses; i++){
					var letterGrade = prompt("What grade did he/she get in class " + i + "? (A,B,C,D, or F only)");
					if (letterGrade.toLowerCase() == 'a'){
						totalCredits += 4;
					}
					else if (letterGrade.toLowerCase() == 'b'){
						totalCredits += 3;
					}
					else if (letterGrade.toLowerCase() == 'c') {
						totalCredits += 2;
					}
					else if (letterGrade.toLowerCase() == 'd') {
						totalCredits += 1;
					}
				}

				var newGPA = (totalCredits/howManyClasses).toFixed(2);
				var newTotalHours = howManyClasses * 3;
				var newStudentRecord = {name: newName, GPA: newGPA, totalHours: newTotalHours};

				studentsRecords.push(newStudentRecord);
				drawTable();

			}

			function deleteStudent() {
				var nameToBeDeleted = prompt("What's the name of the student to be deleted?");

				for(i = 0; i < studentsRecords.length; i++){
					if (studentsRecords[i].name == nameToBeDeleted){
						studentsRecords.splice(i, 1);
						break;
					}
				}
				drawTable();
			}

			//draw table at least once when first loading the script
			drawTable();

		//TODO: need to include first and last name for students, should probably also update based on something more unique
		//like email or student id. May want to just have one single update button that you pass a name/id/email to and it will
		//handle the update that way. Add in more error handling/checking for correct input from user.

		</script>

	</body> <!-- END body -->

</html>
